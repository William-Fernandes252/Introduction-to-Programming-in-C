Grading at Sun Aug 30 04:19:14 UTC 2020
Running 'make clean' to do a clean build of your project
rm -rf *.o poker *~
Running 'make poker OTHERFLAGS=-O3' to build your project
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3   -c -o cards.o cards.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3   -c -o deck.o deck.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3   -c -o eval.o eval.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3   -c -o future.o future.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3   -c -o input.o input.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3   -c -o main.o main.c
gcc -o poker -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3 cards.o deck.o eval.o future.o input.o main.o
 - Starting with some Texas Hold'em hands
Running a simulation with 20000 draws for 2 hands...
Valgrind reported errors:
==997== Memcheck, a memory error detector
==997== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==997== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==997== Command: ./poker inp.txt 20000
==997== Parent PID: 996
==997== 
==997== Invalid read of size 8
==997==    at 0x400B91: main (main.c:67)
==997==  Address 0x5205d60 is 0 bytes after a block of size 16 alloc'd
==997==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==997==    by 0x4037E5: read_input (input.c:50)
==997==    by 0x400A9B: main (main.c:39)
==997== 
==997== Invalid read of size 8
==997==    at 0x403462: compare_hands (eval.c:183)
==997==    by 0x400B9D: main (main.c:67)
==997==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==997== 
==997== 
==997== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==997==  Access not within mapped region at address 0x8
==997==    at 0x403462: compare_hands (eval.c:183)
==997==    by 0x400B9D: main (main.c:67)
==997==  If you believe this happened as a result of a stack
==997==  overflow in your program's main thread (unlikely but
==997==  possible), you can try to increase the size of the
==997==  main thread stack using the --main-stacksize= flag.
==997==  The main thread stack size used in this run was 8388608.
==997== 
==997== HEAP SUMMARY:
==997==     in use at exit: 1,784 bytes in 77 blocks
==997==   total heap usage: 168 allocs, 91 frees, 20,064 bytes allocated
==997== 
==997== LEAK SUMMARY:
==997==    definitely lost: 16 bytes in 1 blocks
==997==    indirectly lost: 88 bytes in 4 blocks
==997==      possibly lost: 0 bytes in 0 blocks
==997==    still reachable: 1,680 bytes in 72 blocks
==997==         suppressed: 0 bytes in 0 blocks
==997== Rerun with --leak-check=full to see details of leaked memory
==997== 
==997== For counts of detected and suppressed errors, rerun with: -v
==997== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Running a simulation with 25000 draws for 3 hands...
Valgrind reported errors:
==1002== Memcheck, a memory error detector
==1002== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1002== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1002== Command: ./poker inp.txt 25000
==1002== Parent PID: 1001
==1002== 
==1002== Invalid read of size 8
==1002==    at 0x400B91: main (main.c:67)
==1002==  Address 0x5206488 is 0 bytes after a block of size 24 alloc'd
==1002==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1002==    by 0x4037E5: read_input (input.c:50)
==1002==    by 0x400A9B: main (main.c:39)
==1002== 
==1002== Invalid read of size 8
==1002==    at 0x403462: compare_hands (eval.c:183)
==1002==    by 0x400B9D: main (main.c:67)
==1002==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==1002== 
==1002== 
==1002== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1002==  Access not within mapped region at address 0x8
==1002==    at 0x403462: compare_hands (eval.c:183)
==1002==    by 0x400B9D: main (main.c:67)
==1002==  If you believe this happened as a result of a stack
==1002==  overflow in your program's main thread (unlikely but
==1002==  possible), you can try to increase the size of the
==1002==  main thread stack using the --main-stacksize= flag.
==1002==  The main thread stack size used in this run was 8388608.
==1002== 
==1002== HEAP SUMMARY:
==1002==     in use at exit: 1,928 bytes in 84 blocks
==1002==   total heap usage: 199 allocs, 115 frees, 20,128 bytes allocated
==1002== 
==1002== LEAK SUMMARY:
==1002==    definitely lost: 24 bytes in 1 blocks
==1002==    indirectly lost: 176 bytes in 8 blocks
==1002==      possibly lost: 0 bytes in 0 blocks
==1002==    still reachable: 1,728 bytes in 75 blocks
==1002==         suppressed: 0 bytes in 0 blocks
==1002== Rerun with --leak-check=full to see details of leaked memory
==1002== 
==1002== For counts of detected and suppressed errors, rerun with: -v
==1002== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Running a simulation with 25000 draws for 3 hands...
Valgrind reported errors:
==1007== Memcheck, a memory error detector
==1007== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1007== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1007== Command: ./poker inp2.txt 25000
==1007== Parent PID: 1006
==1007== 
==1007== Invalid read of size 8
==1007==    at 0x400B91: main (main.c:67)
==1007==  Address 0x5206488 is 0 bytes after a block of size 24 alloc'd
==1007==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1007==    by 0x4037E5: read_input (input.c:50)
==1007==    by 0x400A9B: main (main.c:39)
==1007== 
==1007== Invalid read of size 8
==1007==    at 0x403462: compare_hands (eval.c:183)
==1007==    by 0x400B9D: main (main.c:67)
==1007==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==1007== 
==1007== 
==1007== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1007==  Access not within mapped region at address 0x8
==1007==    at 0x403462: compare_hands (eval.c:183)
==1007==    by 0x400B9D: main (main.c:67)
==1007==  If you believe this happened as a result of a stack
==1007==  overflow in your program's main thread (unlikely but
==1007==  possible), you can try to increase the size of the
==1007==  main thread stack using the --main-stacksize= flag.
==1007==  The main thread stack size used in this run was 8388608.
==1007== 
==1007== HEAP SUMMARY:
==1007==     in use at exit: 1,928 bytes in 84 blocks
==1007==   total heap usage: 199 allocs, 115 frees, 20,128 bytes allocated
==1007== 
==1007== LEAK SUMMARY:
==1007==    definitely lost: 24 bytes in 1 blocks
==1007==    indirectly lost: 176 bytes in 8 blocks
==1007==      possibly lost: 0 bytes in 0 blocks
==1007==    still reachable: 1,728 bytes in 75 blocks
==1007==         suppressed: 0 bytes in 0 blocks
==1007== Rerun with --leak-check=full to see details of leaked memory
==1007== 
==1007== For counts of detected and suppressed errors, rerun with: -v
==1007== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Running a simulation with 25000 draws for 2 hands...
Valgrind reported errors:
==1012== Memcheck, a memory error detector
==1012== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1012== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1012== Command: ./poker inp2.txt 25000
==1012== Parent PID: 1011
==1012== 
==1012== Invalid read of size 8
==1012==    at 0x400B91: main (main.c:67)
==1012==  Address 0x5205d60 is 0 bytes after a block of size 16 alloc'd
==1012==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1012==    by 0x4037E5: read_input (input.c:50)
==1012==    by 0x400A9B: main (main.c:39)
==1012== 
==1012== Invalid read of size 8
==1012==    at 0x403462: compare_hands (eval.c:183)
==1012==    by 0x400B9D: main (main.c:67)
==1012==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==1012== 
==1012== 
==1012== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1012==  Access not within mapped region at address 0x8
==1012==    at 0x403462: compare_hands (eval.c:183)
==1012==    by 0x400B9D: main (main.c:67)
==1012==  If you believe this happened as a result of a stack
==1012==  overflow in your program's main thread (unlikely but
==1012==  possible), you can try to increase the size of the
==1012==  main thread stack using the --main-stacksize= flag.
==1012==  The main thread stack size used in this run was 8388608.
==1012== 
==1012== HEAP SUMMARY:
==1012==     in use at exit: 1,784 bytes in 77 blocks
==1012==   total heap usage: 168 allocs, 91 frees, 20,064 bytes allocated
==1012== 
==1012== LEAK SUMMARY:
==1012==    definitely lost: 16 bytes in 1 blocks
==1012==    indirectly lost: 88 bytes in 4 blocks
==1012==      possibly lost: 0 bytes in 0 blocks
==1012==    still reachable: 1,680 bytes in 72 blocks
==1012==         suppressed: 0 bytes in 0 blocks
==1012== Rerun with --leak-check=full to see details of leaked memory
==1012== 
==1012== For counts of detected and suppressed errors, rerun with: -v
==1012== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Running a simulation with 80000 draws for 4 hands...
Valgrind reported errors:
==1017== Memcheck, a memory error detector
==1017== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1017== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1017== Command: ./poker inp3.txt 80000
==1017== Parent PID: 1016
==1017== 
==1017== Invalid read of size 8
==1017==    at 0x400B91: main (main.c:67)
==1017==  Address 0x5206790 is 0 bytes after a block of size 32 alloc'd
==1017==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1017==    by 0x4037E5: read_input (input.c:50)
==1017==    by 0x400A9B: main (main.c:39)
==1017== 
==1017== Invalid read of size 8
==1017==    at 0x403462: compare_hands (eval.c:183)
==1017==    by 0x400B9D: main (main.c:67)
==1017==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==1017== 
==1017== 
==1017== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1017==  Access not within mapped region at address 0x8
==1017==    at 0x403462: compare_hands (eval.c:183)
==1017==    by 0x400B9D: main (main.c:67)
==1017==  If you believe this happened as a result of a stack
==1017==  overflow in your program's main thread (unlikely but
==1017==  possible), you can try to increase the size of the
==1017==  main thread stack using the --main-stacksize= flag.
==1017==  The main thread stack size used in this run was 8388608.
==1017== 
==1017== HEAP SUMMARY:
==1017==     in use at exit: 1,880 bytes in 85 blocks
==1017==   total heap usage: 219 allocs, 134 frees, 19,216 bytes allocated
==1017== 
==1017== LEAK SUMMARY:
==1017==    definitely lost: 32 bytes in 1 blocks
==1017==    indirectly lost: 336 bytes in 21 blocks
==1017==      possibly lost: 0 bytes in 0 blocks
==1017==    still reachable: 1,512 bytes in 63 blocks
==1017==         suppressed: 0 bytes in 0 blocks
==1017== Rerun with --leak-check=full to see details of leaked memory
==1017== 
==1017== For counts of detected and suppressed errors, rerun with: -v
==1017== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Running a simulation with 30000 draws for 2 hands...
Valgrind reported errors:
==1022== Memcheck, a memory error detector
==1022== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1022== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1022== Command: ./poker inp.txt 30000
==1022== Parent PID: 1021
==1022== 
==1022== Invalid read of size 8
==1022==    at 0x400B91: main (main.c:67)
==1022==  Address 0x5205af0 is 0 bytes after a block of size 16 alloc'd
==1022==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1022==    by 0x4037E5: read_input (input.c:50)
==1022==    by 0x400A9B: main (main.c:39)
==1022== 
==1022== Invalid read of size 8
==1022==    at 0x403462: compare_hands (eval.c:183)
==1022==    by 0x400B9D: main (main.c:67)
==1022==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==1022== 
==1022== 
==1022== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1022==  Access not within mapped region at address 0x8
==1022==    at 0x403462: compare_hands (eval.c:183)
==1022==    by 0x400B9D: main (main.c:67)
==1022==  If you believe this happened as a result of a stack
==1022==  overflow in your program's main thread (unlikely but
==1022==  possible), you can try to increase the size of the
==1022==  main thread stack using the --main-stacksize= flag.
==1022==  The main thread stack size used in this run was 8388608.
==1022== 
==1022== HEAP SUMMARY:
==1022==     in use at exit: 1,640 bytes in 71 blocks
==1022==   total heap usage: 159 allocs, 88 frees, 18,840 bytes allocated
==1022== 
==1022== LEAK SUMMARY:
==1022==    definitely lost: 16 bytes in 1 blocks
==1022==    indirectly lost: 112 bytes in 7 blocks
==1022==      possibly lost: 0 bytes in 0 blocks
==1022==    still reachable: 1,512 bytes in 63 blocks
==1022==         suppressed: 0 bytes in 0 blocks
==1022== Rerun with --leak-check=full to see details of leaked memory
==1022== 
==1022== For counts of detected and suppressed errors, rerun with: -v
==1022== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
 - Next, few Seven Card Stud hands
Running a simulation with 30000 draws for 2 hands...
Valgrind reported errors:
==1027== Memcheck, a memory error detector
==1027== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1027== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1027== Command: ./poker inp.txt 30000
==1027== Parent PID: 1026
==1027== 
==1027== Invalid read of size 8
==1027==    at 0x400B91: main (main.c:67)
==1027==  Address 0x5205bb0 is 0 bytes after a block of size 16 alloc'd
==1027==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1027==    by 0x4037E5: read_input (input.c:50)
==1027==    by 0x400A9B: main (main.c:39)
==1027== 
==1027== Invalid read of size 8
==1027==    at 0x403462: compare_hands (eval.c:183)
==1027==    by 0x400B9D: main (main.c:67)
==1027==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==1027== 
==1027== 
==1027== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1027==  Access not within mapped region at address 0x8
==1027==    at 0x403462: compare_hands (eval.c:183)
==1027==    by 0x400B9D: main (main.c:67)
==1027==  If you believe this happened as a result of a stack
==1027==  overflow in your program's main thread (unlikely but
==1027==  possible), you can try to increase the size of the
==1027==  main thread stack using the --main-stacksize= flag.
==1027==  The main thread stack size used in this run was 8388608.
==1027== 
==1027== HEAP SUMMARY:
==1027==     in use at exit: 1,784 bytes in 78 blocks
==1027==   total heap usage: 169 allocs, 91 frees, 19,688 bytes allocated
==1027== 
==1027== LEAK SUMMARY:
==1027==    definitely lost: 16 bytes in 1 blocks
==1027==    indirectly lost: 88 bytes in 4 blocks
==1027==      possibly lost: 0 bytes in 0 blocks
==1027==    still reachable: 1,680 bytes in 73 blocks
==1027==         suppressed: 0 bytes in 0 blocks
==1027== Rerun with --leak-check=full to see details of leaked memory
==1027== 
==1027== For counts of detected and suppressed errors, rerun with: -v
==1027== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Running a simulation with 40000 draws for 3 hands...
Valgrind reported errors:
==1032== Memcheck, a memory error detector
==1032== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1032== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1032== Command: ./poker inp2.txt 40000
==1032== Parent PID: 1031
==1032== 
==1032== Invalid read of size 8
==1032==    at 0x400B91: main (main.c:67)
==1032==  Address 0x52063e8 is 0 bytes after a block of size 24 alloc'd
==1032==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1032==    by 0x4037E5: read_input (input.c:50)
==1032==    by 0x400A9B: main (main.c:39)
==1032== 
==1032== Invalid read of size 8
==1032==    at 0x403462: compare_hands (eval.c:183)
==1032==    by 0x400B9D: main (main.c:67)
==1032==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==1032== 
==1032== 
==1032== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1032==  Access not within mapped region at address 0x8
==1032==    at 0x403462: compare_hands (eval.c:183)
==1032==    by 0x400B9D: main (main.c:67)
==1032==  If you believe this happened as a result of a stack
==1032==  overflow in your program's main thread (unlikely but
==1032==  possible), you can try to increase the size of the
==1032==  main thread stack using the --main-stacksize= flag.
==1032==  The main thread stack size used in this run was 8388608.
==1032== 
==1032== HEAP SUMMARY:
==1032==     in use at exit: 1,848 bytes in 82 blocks
==1032==   total heap usage: 197 allocs, 115 frees, 18,856 bytes allocated
==1032== 
==1032== LEAK SUMMARY:
==1032==    definitely lost: 24 bytes in 1 blocks
==1032==    indirectly lost: 208 bytes in 12 blocks
==1032==      possibly lost: 0 bytes in 0 blocks
==1032==    still reachable: 1,616 bytes in 69 blocks
==1032==         suppressed: 0 bytes in 0 blocks
==1032== Rerun with --leak-check=full to see details of leaked memory
==1032== 
==1032== For counts of detected and suppressed errors, rerun with: -v
==1032== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
 - Then one from a completely made up poker variant
Running a simulation with 100000 draws for 6 hands...
Valgrind reported errors:
==1037== Memcheck, a memory error detector
==1037== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1037== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1037== Command: ./poker whacky.txt 100000
==1037== Parent PID: 1036
==1037== 
==1037== Invalid read of size 8
==1037==    at 0x400B91: main (main.c:67)
==1037==  Address 0x52077f0 is 0 bytes after a block of size 48 alloc'd
==1037==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1037==    by 0x4037E5: read_input (input.c:50)
==1037==    by 0x400A9B: main (main.c:39)
==1037== 
==1037== Invalid read of size 8
==1037==    at 0x403462: compare_hands (eval.c:183)
==1037==    by 0x400B9D: main (main.c:67)
==1037==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==1037== 
==1037== 
==1037== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1037==  Access not within mapped region at address 0x8
==1037==    at 0x403462: compare_hands (eval.c:183)
==1037==    by 0x400B9D: main (main.c:67)
==1037==  If you believe this happened as a result of a stack
==1037==  overflow in your program's main thread (unlikely but
==1037==  possible), you can try to increase the size of the
==1037==  main thread stack using the --main-stacksize= flag.
==1037==  The main thread stack size used in this run was 8388608.
==1037== 
==1037== HEAP SUMMARY:
==1037==     in use at exit: 2,152 bytes in 98 blocks
==1037==   total heap usage: 305 allocs, 207 frees, 19,992 bytes allocated
==1037== 
==1037== LEAK SUMMARY:
==1037==    definitely lost: 48 bytes in 1 blocks
==1037==    indirectly lost: 520 bytes in 30 blocks
==1037==      possibly lost: 0 bytes in 0 blocks
==1037==    still reachable: 1,584 bytes in 67 blocks
==1037==         suppressed: 0 bytes in 0 blocks
==1037== Rerun with --leak-check=full to see details of leaked memory
==1037== 
==1037== For counts of detected and suppressed errors, rerun with: -v
==1037== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
